buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven { url = "https://jitpack.io/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.0'
    }
}
        
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

jar.enabled = true
build.dependsOn shadowJar

version = "${mc_version}-${mod_version}"
group = package_group
archivesBaseName = mod_name
compileJava.options.encoding = 'UTF-8'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: mappings_channel, version: mappings_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'src/main/resources'
        }
        resources {
        }
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", mod_version
    inputs.property "mcversion", mc_version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':mod_version, 'mcversion':mc_version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

repositories{
    maven{
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        url 'https://repo.maven.apache.org/maven2'
        name 'Maven Central'
    }
}
configurations {
    compile.extendsFrom shadow
}
dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    compile 'modularvoicechat:ModularVoiceChat:1.1.1'
    shadow group: 'uk.me.berndporr', name:'iirj', version: '1.3'
    shadow group: 'org.apache.commons', name:'commons-math3', version:'3.6.1'
    shadow group: 'org.apache.logging.log4j', name:'log4j-api', version:'2.17.0'
    shadow group: 'org.apache.logging.log4j', name:'log4j-core', version:'2.17.0'
    shadow group: 'commons-io', name: 'commons-io', version: '2.11.0'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}
shadowJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    classifier = null

    relocate('org.apache.commons', 'fr.zeevoker2vex.radio.util.org.apache.commons')
    relocate('uk.me', 'fr.zeevoker2vex.radio.util.uk.me')

    append('mcmod.info')
    append('pack.mcmeta')

    configurations = [project.configurations.shadow]
    dependencies {
        include(dependency('uk.me.berndporr:iirj:1.3'))
        include(dependency('org.apache.commons:commons-math3:3.6.1'))
//        include(dependency('org.apache.logging.log4j:log4j-api:2.17.0'))
//        include(dependency('org.apache.logging.log4j:log4j-core:2.17.0'))
        include(dependency('commons-io:commons-io:2.11.0'))
    }
    manifest {
        attributes([
                "Built-By": System.getProperty('user.name'),
                "Created-By": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
                "Built-On": "${mc_version}-${forge_version}",
                "Specification-Title": mod_name,
                "Specification-Vendor": mod_author,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" : mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

reobf {
    shadowJar {
    }
}
tasks.reobfShadowJar.mustRunAfter shadowJar

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Built-By": System.getProperty('user.name'),
            "Created-By": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Built-On": "${mc_version}-${forge_version}",
            "Specification-Title": mod_name,
            "Specification-Vendor": mod_author,
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" : mod_author,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
sourceSets { main { output.resourcesDir = output.classesDir } }